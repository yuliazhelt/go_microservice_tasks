basePath: /api/v1
definitions:
  models.Approve:
    properties:
      email:
        type: string
      status:
        type: string
      subtasks:
        items:
          type: string
        type: array
    type: object
  models.Task:
    properties:
      approves:
        items:
          $ref: '#/definitions/models.Approve'
        type: array
      author:
        type: string
      description:
        type: string
      id:
        type: string
      isCancelled:
        type: boolean
      title:
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample articles server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Articles API
  version: "1.0"
paths:
  /:
    get:
      description: Gets tasks list created by current user
      operationId: getUserTasks
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: forbidden
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Gets tasks list
      tags:
      - tasks
    post:
      description: Create task if user is correctly logged in, returns task ID
      operationId: create
      parameters:
      - description: Current user
        in: body
        name: author
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: forbidden
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Create task
      tags:
      - tasks
  /{taskId}:
    get:
      description: Gets task description by Task Id
      operationId: getTaskID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "403":
          description: forbidden
          schema:
            type: string
        "404":
          description: task not found
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Gets task description
      tags:
      - tasks
  /approve/{taskId}/{approveInd}:
    post:
      description: Set status "approved" by approver
      operationId: approve
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      - description: Index of approver in approvers list
        in: path
        name: approveInd
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: bad request
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Approve task
      tags:
      - tasks
  /decline/{taskId}/{approveInd}:
    post:
      description: Set status "declined" by approver
      operationId: decline
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: string
      - description: Index of approver in approvers list
        in: path
        name: approveInd
        required: true
        type: string
      responses:
        "200":
          description: OK
        "400":
          description: bad request
          schema:
            type: string
      security:
      - BasicAuth: []
      summary: Decline task
      tags:
      - tasks
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
